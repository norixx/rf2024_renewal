// media query
@mixin mq($breakpoint: md) {
  @if $breakpoint == "md" {
    @media screen and (min-width: 768px) {
      @content;
    }
  }
  @if $breakpoint == "sp" {
    @media screen and (max-width: 767.98px) {
      @content;
    }
  }
}

// media query style generator
@mixin mqStyle($breakpoint: md) {
  @if $breakpoint == "md" {
    @media screen and (min-width: 768px) {
      @content;
    }
  }
}

// link
@mixin linktext {
  color: var(--color-link-text);

  &:hover {
    color: var(--color-link);
  }
}

// icons
@mixin icon($code) {
  content: unquote('"\\#{$code}"');
  font-family: remixicon;
  display: inline-block;
  -webkit-font-smoothing: antialiased;
}

// Visually Hidden
@mixin visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  // clip: rect(0, 0, 0, 0) !important;
  clip-path: inset(0 100% 100% 0);
  white-space: nowrap !important;
  border: 0 !important;
}

// マスクアイコン
@mixin mask-icon($icon) {
  mask: var(#{$icon}) no-repeat center center / contain;
}

// =======================================================
// トグル +-
// 親要素が --is-openを持つことで変化させるようにする
// 親要素の指定方法サンプルコード
// &.--is-open *** {
//   &::after {
//     rotate: 0deg;
//   }
// }
@mixin toggle-icon($bg-color: transparent) {
  // ライン部分
  &::before,
  &::after {
    content: "";
    background-color: $bg-color;
    width: var(--space-16);
    height: 2px;
    position: absolute;
    left: 50%;
    top: 50%;
    translate: -50% -50%;
    transition: rotate var(--animation-normal);
    @content;
  }
  // 縦ライン
  &::after {
    rotate: 90deg;
  }

  // 要素に直接--is-openが追加された場合
  &.--is-open::after,
  .--is-open &::after {
    rotate: 0deg;
  }
}
