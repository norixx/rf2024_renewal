@use "../abstracts/mixins" as *;

// =======================================================
// FONT & TEXT
// font
.u-fw {
  // normal
  &-n {
    font-weight: normal !important;
  }

  &-sb {
    font-weight: 600 !important;
  }
}

.u-ff {
  &-en {
    font-family: sans-serif !important;
  }
}

// Text
.u-tt {
  $transforms: uppercase, lowercase, capitalize;
  @each $transform in $transforms {
    &-#{$transform} {
      text-transform: #{$transform} !important;
    }
  }

  @include mq {
    @each $transform in $transforms {
      &-pc-#{$transform} {
        text-transform: #{$transform} !important;
      }
    }
  }
}

.u-td {
  $values: none, underline, line-through;
  @each $value in $values {
    &-#{$value} {
      text-decoration: #{$value} !important;
    }
  }

  @include mq {
    @each $value in $values {
      &-pc-#{$value} {
        text-decoration: #{$value} !important;
      }
    }
  }
}

// =======================================================
// LAYOUT
.u-flex {
  $positions: start, end, center, between, around, evenly;
  @each $pos in $positions {
    &-#{$pos} {
      $value: #{$pos};
      @if $pos == start {
        $value: flex-start;
      }
      @if $pos == end {
        $value: flex-end;
      }
      @if $pos == center {
        $value: center;
      }
      @if $pos == between {
        $value: space-between;
      }
      @if $pos == around {
        $value: space-around;
      }
      @if $pos == evenly {
        $value: space-evenly;
      }

      // display: flex !important;
      justify-content: #{$value} !important;
    }
  }

  @include mq {
    @each $pos in $positions {
      &-pc-#{$pos} {
        $value: #{$pos};
        @if $pos == start {
          $value: flex-start;
        }
        @if $pos == end {
          $value: flex-end;
        }
        @if $pos == center {
          $value: center;
        }
        @if $pos == between {
          $value: space-between;
        }
        @if $pos == around {
          $value: space-around;
        }
        @if $pos == evenly {
          $value: space-evenly;
        }

        display: flex !important;
        justify-content: #{$value} !important;
      }
    }
  }
}

// =======================================================
// SIZING
// Width
.u-w {
  $widths: auto, 50, 100;

  @each $w in $widths {
    &-#{$w} {
      @if $w != "auto" {
        width: $w * 1% !important;
      } @else {
        width: #{$w} !important;
      }
    }

    @include mq(sp) {
      &-sp-#{$w} {
        @if $w != "auto" {
          width: $w * 1% !important;
        } @else {
          width: #{$w} !important;
        }
      }
    }

    @include mq {
      &-pc-#{$w} {
        @if $w != "auto" {
          width: $w * 1% !important;
        } @else {
          width: #{$w} !important;
        }
      }
    }
  }
}

// Height
// Width
.u-h {
  $heigts: auto, 50, 100;

  @each $h in $heigts {
    &-#{$h} {
      @if $h != "auto" {
        width: $h * 1% !important;
      } @else {
        width: #{$h} !important;
      }
    }

    @include mq(sp) {
      &-sp-#{$h} {
        @if $h != "auto" {
          width: $h * 1% !important;
        } @else {
          width: #{$h} !important;
        }
      }
    }

    @include mq {
      &-pc-#{$h} {
        @if $h != "auto" {
          width: $h * 1% !important;
        } @else {
          width: #{$h} !important;
        }
      }
    }
  }
}

// =======================================================
// DISPLAY
.u-sp-only {
  // display値はその場のレイアウトを優先すること
  display: block;
  @include mq {
    display: none;
  }
}

.u-pc-only {
  // display値はその場のレイアウトを優先すること
  display: none;
  @include mq {
    display: block;
  }
}

// =======================================================
// POSITION
.u-pos {
  $positions: relative, absolute, fixed, sticky;
  @each $pos in $positions {
    &-#{$pos} {
      position: #{$pos} !important;
    }
  }

  @include mq(sp) {
    @each $pos in $positions {
      &-sp-#{$pos} {
        position: #{$pos} !important;
      }
    }
  }

  @include mq {
    @each $pos in $positions {
      &-pc-#{$pos} {
        position: #{$pos} !important;
      }
    }
  }
}

// =======================================================
// SPACING
@mixin spacing($direction, $space, $type, $breakpoint: "") {
  @if $breakpoint != "" {
    $breakpoint: #{$breakpoint}-;
  }
  @if $direction == all {
    @if $type == m {
      &-#{$type}-#{$breakpoint}#{$space} {
        margin: var(--space-#{$space}) !important;
      }
    }
    @if $type == p {
      &-#{$type}-#{$breakpoint}#{$space} {
        padding: var(--space-#{$space}) !important;
      }
    }
  }
  @if $direction == t {
    @if $type == m {
      &-#{$type}#{$direction}-#{$breakpoint}#{$space} {
        margin-top: var(--space-#{$space}) !important;
      }
    }
    @if $type == p {
      &-#{$type}#{$direction}-#{$breakpoint}#{$space} {
        padding-top: var(--space-#{$space}) !important;
      }
    }
  }

  @if $direction == r {
    @if $type == m {
      &-#{$type}#{$direction}-#{$breakpoint}#{$space} {
        margin-right: var(--space-#{$space}) !important;
      }
    }
    @if $type == p {
      &-#{$type}#{$direction}-#{$breakpoint}#{$space} {
        padding-right: var(--space-#{$space}) !important;
      }
    }
  }

  @if $direction == b {
    @if $type == m {
      &-#{$type}#{$direction}-#{$breakpoint}#{$space} {
        margin-bottom: var(--space-#{$space}) !important;
      }
    }
    @if $type == p {
      &-#{$type}#{$direction}-#{$breakpoint}#{$space} {
        padding-bottom: var(--space-#{$space}) !important;
      }
    }
  }

  @if $direction == l {
    @if $type == m {
      &-#{$type}#{$direction}-#{$breakpoint}#{$space} {
        margin-left: var(--space-#{$space}) !important;
      }
    }
    @if $type == p {
      &-#{$type}#{$direction}-#{$breakpoint}#{$space} {
        padding-left: var(--space-#{$space}) !important;
      }
    }
  }

  @if $direction == x {
    @if $type == m {
      &-#{$type}#{$direction}-#{$breakpoint}#{$space} {
        margin-left: var(--space-#{$space}) !important;
        margin-right: var(--space-#{$space}) !important;
      }
    }
    @if $type == p {
      &-#{$type}#{$direction}-#{$breakpoint}#{$space} {
        padding-left: var(--space-#{$space}) !important;
        padding-right: var(--space-#{$space}) !important;
      }
    }
  }

  @if $direction == y {
    @if $type == m {
      &-#{$type}#{$direction}-#{$breakpoint}#{$space} {
        margin-top: var(--space-#{$space}) !important;
        margin-bottom: var(--space-#{$space}) !important;
      }
    }
    @if $type == p {
      &-#{$type}#{$direction}-#{$breakpoint}#{$space} {
        padding-top: var(--space-#{$space}) !important;
        padding-bottom: var(--space-#{$space}) !important;
      }
    }
  }
}
.u {
  $types: m, p;
  $spaces: 0, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 40, 48, 56, 64, 72, 80;
  $directions: all, t, r, b, l, x, y;

  @each $type in $types {
    @each $space in $spaces {
      @each $direction in $directions {
        @include spacing($direction, $space, $type);
      } // @each $direction
    }
  }

  @include mq {
    @each $type in $types {
      @each $space in $spaces {
        @each $direction in $directions {
          @include spacing($direction, $space, $type, "pc");
        } // @each $direction
      }
    }
  }
}
